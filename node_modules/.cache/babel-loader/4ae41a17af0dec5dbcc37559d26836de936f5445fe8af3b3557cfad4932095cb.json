{"ast":null,"code":"var _jsxFileName = \"/home/sonu/opayl/html/frontend/src/components/AuthenticateEnable/TwoFactorEnable.jsx\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Container } from \"@mui/material\";\nimport './TWoFactorEnable.css';\nimport { connect } from \"react-redux\";\nimport urls from \"../../redux/urls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TwoFactorEnable = props => {\n  _s();\n  console.log(\"qrcode props jkldjsfkj===================> qrCodegenrater\", props);\n  const [qrImage, setQrImage] = useState([]);\n  //const [loginUser, setLoginUser] = useState([]);\n  //const [loginId, setLoginId] = useState(props.auth.user.id);\n  const [activeVal, setActiveVal] = useState(1);\n  const loginId = props.auth.user.id;\n  let lastIndexOfSpace = qrImage.slice(1, -1);\n  console.log(\"props.auth.user.id)\", lastIndexOfSpace);\n  let activateDetails = {\n    id: loginId,\n    twofacr: activeVal\n  };\n  useEffect(() => {\n    // if (props.auth.user) {\n    //     //setLoginUser(props.auth.user)\n    //     setLoginId(\n    // }\n\n    if (loginId) {\n      qrCodegenrater(loginId);\n    }\n  }, [props]);\n  const qrCodegenrater = loginId => {\n    fetch(`${urls.base + urls.QrCode}?id=${loginId}`).then(result => result.json()).then(qrdata => {\n      console.log(\"qrdata\", qrdata);\n      if (qrdata) {\n        setQrImage(qrdata.qrcode.image);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  console.log(\"qrImage fgffg\", qrImage);\n  const acivateUserAccount = () => {\n    activateTwoFactUser(activateDetails);\n  };\n  const activateTwoFactUser = activateDetails => {\n    fetch(`${urls.base + urls.twoFactActive}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(activateDetails)\n    }).then(res => res.json()).then(result => {\n      setActiveVal(activeVal === 1 ? 0 : 1);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"factor_authencate\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qr_code\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: qrImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"text-white btn btn-success font-weight-bold mr-1\",\n            onClick: acivateUserAccount,\n            children: [\" \", activeVal === 1 ? \"activate\" : \"Deactivate\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(TwoFactorEnable, \"u6YitEq1dRFiynRz82WE5rljESQ=\");\n_c = TwoFactorEnable;\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(mapStateToProps)(TwoFactorEnable);\nvar _c;\n$RefreshReg$(_c, \"TwoFactorEnable\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","Container","connect","urls","TwoFactorEnable","props","console","log","qrImage","setQrImage","activeVal","setActiveVal","loginId","auth","user","id","lastIndexOfSpace","slice","activateDetails","twofacr","qrCodegenrater","fetch","base","QrCode","then","result","json","qrdata","qrcode","image","catch","error","acivateUserAccount","activateTwoFactUser","twoFactActive","method","headers","Accept","body","JSON","stringify","res","e","mapStateToProps","state"],"sources":["/home/sonu/opayl/html/frontend/src/components/AuthenticateEnable/TwoFactorEnable.jsx"],"sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { Container } from \"@mui/material\";\nimport './TWoFactorEnable.css';\nimport { connect } from \"react-redux\";\nimport urls from \"../../redux/urls\";\n\n\n\nconst TwoFactorEnable = (props) => {\n\n    console.log(\"qrcode props jkldjsfkj===================> qrCodegenrater\", props)\n\n    const [qrImage, setQrImage] = useState([]);\n    //const [loginUser, setLoginUser] = useState([]);\n    //const [loginId, setLoginId] = useState(props.auth.user.id);\n    const [activeVal, setActiveVal] = useState(1);\n\nconst loginId = props.auth.user.id;\n\n    \n\n   let lastIndexOfSpace = qrImage.slice(1,-1);\n\n    console.log(\"props.auth.user.id)\",lastIndexOfSpace)\n\n    let activateDetails = {\n        id: loginId,\n        twofacr: activeVal\n    }\n\n    useEffect(() => {\n\n        // if (props.auth.user) {\n        //     //setLoginUser(props.auth.user)\n        //     setLoginId(\n        // }\n\n        if (loginId) {\n            qrCodegenrater(loginId)\n        }\n\n    },[props])\n\n\n    const qrCodegenrater = (loginId) => {\n\n        fetch(`${urls.base + urls.QrCode}?id=${loginId}`)\n            .then((result) => result.json()).then((qrdata) => {\n                console.log(\"qrdata\", qrdata)\n                if (qrdata) {\n                    setQrImage(qrdata.qrcode.image);\n                }\n            }).catch((error) => {\n                console.log(error)\n            })\n\n    };\n\n\n    console.log(\"qrImage fgffg\", qrImage)\n\n\n\n\n    const acivateUserAccount = () => {\n        activateTwoFactUser(activateDetails)\n    }\n\n    const activateTwoFactUser = (activateDetails) => {\n        fetch(`${urls.base + urls.twoFactActive}`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(activateDetails)\n        }).then((res) => res.json())\n            .then((result) => {\n                setActiveVal(activeVal === 1 ? 0 : 1)\n\n            })\n            .catch((e) => {\n                console.log(e)\n            })\n    }\n\n\n    return (\n        <Fragment>\n            <section className=\"factor_authencate\">\n                <Container>\n                    <div className=\"row\">\n                        <div className=\"qr_code\">\n\n                            <img src={qrImage} />\n                        </div>\n                        <button type=\"button\" className=\"text-white btn btn-success font-weight-bold mr-1\" onClick={acivateUserAccount} > {activeVal === 1 ? \"activate\" : \"Deactivate\"}</button>\n\n                    </div>\n                </Container>\n            </section>\n        </Fragment>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\n\nexport default connect(mapStateToProps)(TwoFactorEnable)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}